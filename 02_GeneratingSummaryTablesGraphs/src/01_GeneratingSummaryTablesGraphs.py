#%% [markdown]
# # Analysis of Transportation Network Companies (TNCs) and Taxis in Chicago
# ## Generating summary tables and graphs of the data
# This notebook generates summary tables and graphs from the selected Taxi and TNC data for Chicago. The starting datasets for this notebook were generated by selecting one week of trips for each dataset: for the TNCs the selected week is November 5 - November 11, 2019; for the taxi trips, the selected week is November 7 - November 13, 2016.
# 
# A project by:<br><br>
# Juan Francisco Saldarriaga<br>
# Senior Data and Design Researcher<br>
# Brown Institute for Media Innovation<br>
# School of Journalism, Columbia University<br>
# jfs2118@columbia.edu<br>
# <br>
# and<br><br>
# David King<br>
# School of Geographical Sciences and Urban Planning<br>
# Faculty Advisor, Barrett Honors College<br>
# Arizona State University<br>
# david.a.king@asu.edu<br>
#
# The original data for this project can be found at:
# * Taxi trips: [Chicago Data Portal](https://data.cityofchicago.org/Transportation/Taxi-Trips/wrvz-psew), accessed on June 12, 2019.
# * TNC trips: [Chicago Data Portal](https://data.cityofchicago.org/Transportation/Transportation-Network-Providers-Trips/m6dm-c72p), accessed on April 26, 2019.

#%% [markdown]
# **Importing libraries (Pandas, Numpy, Geopandas, Matplotlib, and Shapely)**

#%%
import pandas as pd
import numpy as np
import geopandas as gpd
import matplotlib.pyplot as plt
from shapely.geometry import Point
%matplotlib inline

#%% [markdown]
# **Setting global paths and filenames**

#%%
inputDataPath = '/Users/juanfrans/Google Drive/08_Brown/1901_ChicagoTNCs/01_Analysis/02_GeneratingSummaryTablesGraphs/input/'
outputDataPath = '/Users/juanfrans/Google Drive/08_Brown/1901_ChicagoTNCs/01_Analysis/02_GeneratingSummaryTablesGraphs/output/'
tncInputFileName = 'SelectedTNC_Trips_181105_181111.csv'
taxiInputFileName = 'SelectedTaxi_Trips_161107_161113.csv'
# tncOutputFileName = 'SelectedTNC_Trips_181105_181111.csv'
# taxiOutputFileName = 'SelectedTaxi_Trips_161107_161113.csv'

#%% [markdown]
# **Loading and exploring TNC data**

#%%
tncData = pd.tncData = pd.read_csv(inputDataPath + tncInputFileName, delimiter=',', index_col=0)

#%%
tncData.head()

#%%
tncData.tail()

#%%
tncData.shape

#%%
tncData.dtypes

#%% [markdown]
# **Creating new fields of type `datetime` for start and end times**

#%%
# Transform fields to 'Datetime'
tncData['StartDateTime'] = pd.to_datetime(tncData['Trip Start Timestamp'])
tncData['EndDateTime'] = pd.to_datetime(tncData['Trip End Timestamp'])

#%%
tncData.dtypes

#%% [markdown]
# **Generating summary statistics for TNC trips**

#%%
totalTNCRides = len(tncData)
print('Total TNC rides:', totalTNCRides)

#%%
tncAvgFare = tncData['Fare'].mean()
tncMaxFare = tncData['Fare'].max()
tncMinFare = tncData['Fare'].min()
print('Average TNC fare:', tncAvgFare)
print('Maximum TNC fare:', tncMaxFare)
print('Minimum TNC fare:', tncMinFare)

#%%
tncAvgTip = tncData['Tip'].mean()
tncMaxTip = tncData['Tip'].max()
tncMinTip = tncData['Tip'].min()
print('Average TNC tip:', tncAvgTip)
print('Maximum TNC tip:', tncMaxTip)
print('Minimum TNC tip:', tncMinTip)

#%%
tncAvgTripTotal = tncData['Trip Total'].mean()
tncMaxTripTotal = tncData['Trip Total'].max()
tncMinTripTotal = tncData['Trip Total'].min()
print('Average TNC trip total:', tncAvgTripTotal)
print('Maximum TNC trip total:', tncMaxTripTotal)
print('Minimum TNC trip total:', tncMinTripTotal)

#%%
tncAvgDistance = tncData['Trip Miles'].mean()
tncMaxDistance = tncData['Trip Miles'].max()
tncMinDistance = tncData['Trip Miles'].min()
print('Average TNC distance:', tncAvgDistance)
print('Maximum TNC distance:', tncMaxDistance)
print('Minimum TNC distance:', tncMinDistance)

#%%
tncAvgDuration = tncData['Trip Seconds'].mean()
tncMaxDuration = tncData['Trip Seconds'].max()
tncMinDuration = tncData['Trip Seconds'].min()
print('Average TNC duration:', tncAvgDuration)
print('Maximum TNC duration:', tncMaxDuration)
print('Minimum TNC duration:', tncMinDuration)

#%%
totalTNC_ridesPerDay = tncData.groupby(by=tncData['StartDateTime'].dt.date).count()['Trip ID']
print(totalTNC_ridesPerDay)

#%%
tncFarePerDay = tncData.groupby(by=tncData['StartDateTime'].dt.date).agg({'Fare': [np.mean, np.min, np.max]})
print(tncFarePerDay)

#%%
tncTipPerDay = tncData.groupby(by=tncData['StartDateTime'].dt.date).agg({'Tip': [np.mean, np.min, np.max]})
print(tncTipPerDay)
# ****Note, does this take into account cash trips too? Is that possible in TNCs?****

#%%
tncTripTotalPerDay = tncData.groupby(by=tncData['StartDateTime'].dt.date).agg({'Trip Total': [np.mean, np.min, np.max]})
print(tncTripTotalPerDay)

#%%
tncDistancePerDay = tncData.groupby(by=tncData['StartDateTime'].dt.date).agg({'Trip Miles': [np.mean, np.min, np.max]})
print(tncDistancePerDay)

#%%
tncDurationPerDay = tncData.groupby(by=tncData['StartDateTime'].dt.date).agg({'Trip Seconds': [np.mean, np.min, np.max]})
print(tncDurationPerDay)

#%%
dateRange = pd.date_range(start='2018-11-05', end='2018-11-11')
for date in dateRange:
    tncTripsThisDay = tncData[(tncData['StartDateTime'] >= date) & (tncData['StartDateTime'] < (date + pd.DateOffset(1)))]
    tripsPerHour = tncTripsThisDay['Trip ID'].groupby(by=tncTripsThisDay['StartDateTime'].dt.hour).count()
    print('Peak hour for', date, 'is', tripsPerHour.idxmax(), 'with', tripsPerHour[tripsPerHour.idxmax()], 'trips.')

#%% [markdown]
# Plan
# * Create new fields with datetime type
# * Create summary tables:
#   * TNCs
#   * Taxis
# * Generate graph for week:
#   * TNCs
#   * Taxis
#   * TNCs vs Taxis
# * Generate graph for one day:
#   * Wednesday (TNCs, Taxis, both)
#   * Saturday (TNCs, Taxis, both)


#%% [markdown]
# **Loading and exploring Taxi data**

#%%
taxiData = pd.read_csv(inputDataPath + taxiInputFileName, delimiter=',', index_col=0)

#%%
taxiData.head()

#%%
taxiData.tail()

#%%
taxiData.shape

#%%
taxiData.dtypes

#%% [markdown]
# **Creating new fields of type `datetime` for start and end times**

#%%
# Transform fields to 'Datetime'
taxiData['StartDateTime'] = pd.to_datetime(taxiData['Trip Start Timestamp'])
taxiData['EndDateTime'] = pd.to_datetime(taxiData['Trip End Timestamp'])

#%%
taxiData.dtypes

#%% [markdown]
# **Generating summary statistics for Taxi trips**

#%%
totalTaxiRides = len(taxiData)
print('Total Taxi rides:', totalTaxiRides)

#%%
taxiAvgFare = taxiData['Fare'].mean()
taxiMaxFare = taxiData['Fare'].max()
taxiMinFare = taxiData['Fare'].min()
print('Average Taxi fare:', taxiAvgFare)
print('Maximum Taxi fare:', taxiMaxFare)
print('Minimum Taxi fare:', taxiMinFare)

#%%
taxiAvgTip = taxiData['Tips'].mean()
taxiMaxTip = taxiData['Tips'].max()
taxiMinTip = taxiData['Tips'].min()
print('Average Taxi tip:', taxiAvgTip)
print('Maximum Taxi tip:', taxiMaxTip)
print('Minimum Taxi tip:', taxiMinTip)

#%%
taxiAvgTripTotal = taxiData['Trip Total'].mean()
taxiMaxTripTotal = taxiData['Trip Total'].max()
taxiMinTripTotal = taxiData['Trip Total'].min()
print('Average Taxi trip total:', taxiAvgTripTotal)
print('Maximum Taxi trip total:', taxiMaxTripTotal)
print('Minimum Taxi trip total:', taxiMinTripTotal)

#%%
taxiAvgDistance = taxiData['Trip Miles'].mean()
taxiMaxDistance = taxiData['Trip Miles'].max()
taxiMinDistance = taxiData['Trip Miles'].min()
print('Average Taxi distance:', taxiAvgDistance)
print('Maximum Taxi distance:', taxiMaxDistance)
print('Minimum Taxi distance:', taxiMinDistance)

#%%
taxiAvgDuration = taxiData['Trip Seconds'].mean()
taxiMaxDuration = taxiData['Trip Seconds'].max()
taxiMinDuration = taxiData['Trip Seconds'].min()
print('Average Taxi duration:', taxiAvgDuration)
print('Maximum Taxi duration:', taxiMaxDuration)
print('Minimum Taxi duration:', taxiMinDuration)

#%%
totalTaxi_ridesPerDay = taxiData.groupby(by=taxiData['StartDateTime'].dt.date).count()['Trip ID']
print(totalTaxi_ridesPerDay)

#%%
taxiFarePerDay = taxiData.groupby(by=taxiData['StartDateTime'].dt.date).agg({'Fare': [np.mean, np.min, np.max]})
print(taxiFarePerDay)

#%%
taxiTipPerDay = taxiData.groupby(by=taxiData['StartDateTime'].dt.date).agg({'Tip': [np.mean, np.min, np.max]})
print(taxiTipPerDay)
# ****Note, does this take into account cash trips too****

#%%
tncTripTotalPerDay = tncData.groupby(by=tncData['StartDateTime'].dt.date).agg({'Trip Total': [np.mean, np.min, np.max]})
print(tncTripTotalPerDay)

#%%
tncDistancePerDay = tncData.groupby(by=tncData['StartDateTime'].dt.date).agg({'Trip Miles': [np.mean, np.min, np.max]})
print(tncDistancePerDay)

#%%
tncDurationPerDay = tncData.groupby(by=tncData['StartDateTime'].dt.date).agg({'Trip Seconds': [np.mean, np.min, np.max]})
print(tncDurationPerDay)















